React Setup :

- Install Node.js

- Install React

//inside Index.js

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';


ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

    Strict mode renders the whole component twice and checks for any errors.

//inside App.js

    import React from 'react';
    import './App.css';

    function App() {
      return (
        <div className="App">
          <h1>React App</h1>
        </div>
      );
    }

export default App;

//inside App.css

    .App {
      text-align: center;
    }

//inside index.css

    body {
      margin: 0;
      padding: 0;
      scroll-behavior: smooth;
      font-family: sans-serif;
    }


//props

    Passing props into a component

    const Book = (props) => {
      return (
        <article>
          <Image img={props.img} />
          <Title title={props.title} />
          <Author author={props.author} />
        </article>
      );
    };

    const BookList = () => {
      return (
        <section className="bookList">
          <Book img = {src} title = "Book Title  author = {book.author} " />
        </section>
      );
    };
        //both these component can be in different files and the book component can be imported into the bookList component

//destructuring props

    const Book = (props) => {
      const { img, title, author } = props;
      return (
        <article>
          <img src={img} alt="" />
          <h1>{title}</h1>
          <h4>{author}</h4>
        </article>
      );
    };

    or

    const Book = ({ img, title, author }) => {
      return (
        <article>
          <img src={img} alt="" />
          <h1>{title}</h1>
          <h4>{author}</h4>
        </article>
      );
    };

//children props

    const BookList = () => {
      return (
        <section className="bookList">
          <Book img = {src} title = "Book Title  author = {book.author} ">
            <p>
              Random Text
            </p>
          </Book>
        </section>
      );
    };

    const Book = ({ img, title, author, children }) => {
      return (
        <article>
          <img src={img} alt="" />
          <h1>{title}</h1>
          <h4>{author}</h4>
          {children} //Lorem ...
        </article>
      );
    }; 


//useState .

  Keep a value between renders and trigger a re-render when it changes.

  It is a function that returns an array.

  [undefined , function]

  const [count, setCount] = useState(0);
  Here the parameter of the useState func is the default value.

  setCount is a function that is used to change the value of count and whenever this function is called the component is re-rendered.

  NOTE : IN ORDER TO USE ANY HOOK THE COMPONENT MUST BE START WITH CAPITAL LETTER.

  while using setValue inside a setTimeout we must use  function to change the value .

    eg.: This is wrong"
          setTimeout(() => {
            setValue(value + 1);
          }, 2000);

          This is correct:
          setTimeout(() => {
            setValue((currentValue) => {
              return CurrentValue + 1;
            });
          }, 2000);

//useEffect

    By default after every re-render.


    useEffect(() => {
      console.log('useEffect');
    });

    useEffect(() => {
      console.log('useEffect');
    }, [value]);

    here Value is called the list of dependencies and useEffect will only run when the value changes.

    useEffect(() => {
      console.log('useEffect');
    }, []);

    here the useEffect will only run once when the component is rendered for the first time.


    useEffect has a option to return a function which will be called before the useEffect is called again.


    useEffect(() => {
      console.log('useEffect');//setup code
      return () => {
        console.log('cleanup');//cleanup code
      }});

     Your setup function may also optionally return a cleanup function. When your component is added to the DOM, React will run your setup function. After every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values. After your component is removed from the DOM, React will run your cleanup function.


// && and ||

    && is used to check if the first value is true then only the second value is returned.

    || is used to check if the first value is false then only the second value is returned.

    eg.:

    const [value, setValue] = useState(0);

    value && <h1>hello world</h1> //if value is true then only the h1 tag is returned.

    value || <h1>hello world</h1> //if value is false then only the h1 tag is returned.


//Form control 

  Submit: There are two ways to submit a form.
  
      1. Using a onSubmit on the form tag.
      2. Using a button with type button and using onClick to submit the form.

//useRef

    preserves the value between renders.
    Does not trigger re-render
    Target DOM nodes/elements.

    It is used to reference a DOM element.

    const refContainer = useRef(initialValue);

    const handleSubmit = (e) => {
      e.preventDefault();
      console.log(refContainer.current.value);
    };

    <form className="form" onSubmit={handleSubmit}>
      <div>
        <input type="text" ref={refContainer} />
        <button type="submit">Submit</button>
      </div>
    </form> 

//useReducer

     const [state,dispatch] = useReducer(reducer,defaultState);

     reducer is a function that takes in two parameters state and action and returns a new state.

      const reducer = (state, action) => {
        switch (action.type) {
          case 'ADD_ITEM':
            return {
              ...state,
              people: [...state.people, action.payload],
              isModalOpen: true,
              modalContent: 'item added',
            };
          case 'NO_VALUE':
            return {
              ...state,
              isModalOpen: true,
              modalContent: 'please enter value',
            };
          case 'CLOSE_MODAL':
            return { ...state, isModalOpen: false };
          case 'REMOVE_ITEM':
            const newPeople = state.people.filter(
              (person) => person.id !== action.payload
            );
            return { ...state, people: newPeople };
          default:
            throw new Error('no matching action type');
        }

      };

      const defaultState = {
        people: [],
        isModalOpen: false,
        modalContent: '',
      };


      while using dispatch... call it as dispatch({type:'TESTING',payload:newItem})

      payload is the data that is passed to the reducer function.

      when a type matches in reduce only then the state is changed .

      The state can only be changed by using the dispatch function.

//prop drilling

      When the component tree is like this  App->BookList->Book->Image and i want to pass the image to the image component then i have to pass it through all the components. This is called prop drilling.  Where the data is passed through all the components and the components in between do not use the data.

      This can be solved by Context API or Redux.

//Context API

      Context provides a way to pass data through the component tree without having to pass props down manually at every level.

      const PersonContext = React.createContext();
      //we get two components back . 1 provider and 1 consumer. Provider works as a distributer and consumer works as a receiver. 

      const PersonProvider = ({ children }) => {
        const [people, setPeople] = useState(data);
        const [modalOpen, setModalOpen] = useState(false);
        const [modalContent, setModalContent] = useState('');

        const removePerson = (id) => {
          setPeople((people) => {
            return people.filter((person) => person.id !== id);
          });
          setModalOpen(true);
          setModalContent('item removed');
        };

        const closeModal = () => {
          setModalOpen(false);
        };

        return (
          //wrapping the return of the provider with the context provider. This provider basically wraps the whole component tree or later we can also wrap the whole app with this provider.


          <PersonContext.Provider
            value={{ people, modalOpen, modalContent, removePerson, closeModal }}
          >
            {children}
          </PersonContext.Provider>


        );
      };


      //This useContext gets the value from the provider and we can use it in any component that is wrapped by the provider.
      const useGlobalContext = () => {
        return useContext(PersonContext);
      };

      export { PersonProvider, useGlobalContext };

      In the above code we have created a context and a provider and a custom hook.

      The provider is used to wrap the components that need the data.

      The custom hook is used to use the data in the components.

      The provider has a value prop which is used to pass the data to the components.

      The provider can be used to pass functions also.

//useFetch


      const useFetch = (url) => {
        const [loading, setLoading] = useState(true);
        const [tours, setTours] = useState([]);

        const fetchTours = async () => {
          setLoading(true);
          try {
            const response = await fetch(url);
            const tours = await response.json();
            setLoading(false);
            setTours(tours);
          } catch (error) {
            setLoading(false);
            console.log(error);
          }
        };

        useEffect(() => {
          fetchTours();
        }, [url]);
        //run the function only when the url changes other wise it will run on every re-render.

        return { loading, tours };
      };

      export default useFetch;

      This is a custom hook that is used to fetch data from an api.

      It returns the loading state and the data.

      It is used in the component like this.

      const { loading, tours } = useFetch();


//propTypes

      It is used to check the type of the props that are passed to the component.

      import PropTypes from 'prop-types';
      //Import the component but we will use the property inside that component.

      const Book = ({ img, title, author, children }) => {
        return (
          <article>
            <img src={img} alt="" />
            <h1>{title}</h1>
            <h4>{author}</h4>
            {children}
          </article>
        );
      };

      Book.propTypes = {
        img: PropTypes.string.isRequired,
        title: PropTypes.string.isRequired,
      };

      Book.defaultProps = {
        title: 'No Title',
      };

//React Router

      npm i react-router-dom

      import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';  

      <Router>
        <Switch>
          <Route exact path="/">
            <Home />
          </Route>
          <Route path="/about">
            <About />
          </Route>
          <Route path="/people">
            <People />
          </Route>
          <Route path="/person/:id" children={<Person />}></Route>
          <Route path="*">
            <Error />
          </Route>
        </Switch>


      </Router>


      //Link

      <Link to="/person/1" className="btn">
        More Info



      eg.:

    Inside index.js

      import { BrowserRouter as Router,Route,Switch } from 'react-router-dom';

      //pages
      import Home from './Home';
      import About from './About';
      import People from './People';
      import Error from './Error';
      //Error page is  used to setup a 404 page. When the user enters a wrong url then this page will be rendered.
      import Person from './Person';
      
      //navbar

      import Navbar from './Navbar';

      const ReactRouterSetup = () => {
        return (
          <Router>
            <Navbar />
            <Switch>
            //Switch is used to render only one component at a time.
            //exact is used to match the exact path.
            //Inside Switch we can have multiple routes. Only the route that matches will be rendered.
              <Route exact path="/">
                <Home />
              </Route>
              <Route path="/about">
                <About />
              </Route>
              <Route path="/people">
                <People />
              </Route>

              //:id is used to pass the id as a parameter to the component. This is called URLparameters. Children is used to render the component. 
              <Route path="/person/:id" children={<Person />}></Route>
              <Route path="*">
                <Error />
              </Route>
            </Switch>
          </Router>
        );
      };

    Inside Navbar

      import {Link} from 'react-router-dom';

      const Navbar =()=>{
        return(
          <nav>
            <ul>
              <li>
                <Link to="/">Home</Link>
              </li>
              <li>
                <Link to="/about">About</Link>
              </li>
              <li>
                <Link to="/people">People</Link>
              </li>
            </ul>
          </nav>
        )
      }

      export default Navbar;

  //Using URL parameters and useParams hook.

      <Route path="/person/:id" children={<Person />}></Route>
      //This is how to set up the route to use URL parameters.

      Inside People.js

      import { Link } from 'react-router-dom';

      const People = () => {
        const [people, setPeople] = useState(data);

        return (
          <div>
            <h1>People Page</h1>
            {people.map((person) => {
              return (
                <div key={person.id} className="item">
                  <h4>{person.name}</h4>
                  <Link to={`/person/${person.id}`}>Learn More</Link>
                    //This will put a link which will get the id and redirect to the person component.
                </div>
              );
            })}
          </div>
        );
      };


      Inside Person.js

      import { useParams, Link } from 'react-router-dom';

      const Person = () => {
        const { id } = useParams();
        //useParams is used to get the parameters from the url.
        const [name, setName] = useState('default name');
        useEffect(() => {
          const newPerson = data.find((person) => person.id === parseInt(id));
          setName(newPerson.name);
        }, []);

        return (
          <div>
            <h1>{name}</h1>
            <Link to="/people" className="btn">
              Back to People
            </Link>
          </div>
        );
      };

      export default Person;

      