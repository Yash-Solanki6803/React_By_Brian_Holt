React Setup :

- Install Node.js

- Install React

//inside Index.js

import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';


ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);


//inside App.js

    import React from 'react';
    import './App.css';

    function App() {
      return (
        <div className="App">
          <h1>React App</h1>
        </div>
      );
    }

export default App;

//inside App.css

    .App {
      text-align: center;
    }

//inside index.css

    body {
      margin: 0;
      padding: 0;
      scroll-behavior: smooth;
      font-family: sans-serif;
    }


//props

    Passing props into a component

    const Book = (props) => {
      return (
        <article>
          <Image img={props.img} />
          <Title title={props.title} />
          <Author author={props.author} />
        </article>
      );
    };

    const BookList = () => {
      return (
        <section className="booklist">
          <Book img = {src} title = "Book Title  author = {book.author} " />
        </section>
      );
    };
        //both these component can be in different files and the book component can be imported into the booklist component

//destructuring props

    const Book = (props) => {
      const { img, title, author } = props;
      return (
        <article>
          <img src={img} alt="" />
          <h1>{title}</h1>
          <h4>{author}</h4>
        </article>
      );
    };

    or

    const Book = ({ img, title, author }) => {
      return (
        <article>
          <img src={img} alt="" />
          <h1>{title}</h1>
          <h4>{author}</h4>
        </article>
      );
    };

//children props

    const BookList = () => {
      return (
        <section className="booklist">
          <Book img = {src} title = "Book Title  author = {book.author} ">
            <p>
              Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam
              voluptatum, quibusdam, quia, quae voluptate voluptas quod dolorum
              voluptatibus quos natus quidem? Quisquam, quibusdam, quia, quae
              voluptate voluptas quod dolorum voluptatibus quos natus quidem?
            </p>
          </Book>
        </section>
      );
    };

    const Book = ({ img, title, author, children }) => {
      return (
        <article>
          <img src={img} alt="" />
          <h1>{title}</h1>
          <h4>{author}</h4>
          {children} //Lorem ...
        </article>
      );
    }; 


//useState .

  Keep a value between renders and trigger a re-render when it changes.

  It is a function that returns an array.

  [undefined , function]

  const [count, setCount] = useState(0);
  Here the parameter of the useState func is the default value.

  setCount is a function that is used to change the value of count and whenever this function is called the component is re-rendered.

  NOTE : INORDER TO USE ANY HOOK THE COMPONENT MUST BE START WITH CAPITAL LETTER.

  while using setvalue inside a setTimeout we must use  function to change the value .

    eg.: This is wrong"
          setTimeout(() => {
            setValue(value + 1);
          }, 2000);

          This is correct:
          setTimeout(() => {
            setValue((currentValue) => {
              return CurrentValue + 1;
            });
          }, 2000);

//useEffect

    By default after every re-render.


    useEffect(() => {
      console.log('useEffect');
    });

    useEffect(() => {
      console.log('useEffect');
    }, [value]);

    here Value is called the list of dependencies and useEffect will only run when the value changes.

    useEffect(() => {
      console.log('useEffect');
    }, []);

    here the useEffect will only run once when the component is rendered for the first time.


    useEffect has a option to return a function which will be called before the useEffect is called again.


    useEffect(() => {
      console.log('useEffect');//setup code
      return () => {
        console.log('cleanup');//cleanup code
      }});

     Your setup function may also optionally return a cleanup function. When your component is added to the DOM, React will run your setup function. After every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values. After your component is removed from the DOM, React will run your cleanup function.


// && and ||

    && is used to check if the first value is true then only the second value is returned.

    || is used to check if the first value is false then only the second value is returned.

    eg.:

    const [value, setValue] = useState(0);

    value && <h1>hello world</h1> //if value is true then only the h1 tag is returned.

    value || <h1>hello world</h1> //if value is false then only the h1 tag is returned.


//Form control 

  Submit: There are two ways to submit a form.
  
      1. Using a onSubmit on the form tag.
      2. Using a button with type button and using onClick to submit the form.
